<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        Width="770" Height="550"
        x:Name="u"
        x:Class="System.Application.UI.Views.Windows.IdleAppWindow"
        xmlns:resx="using:System.Application.UI.Resx"
        xmlns:vm="using:System.Application.UI.ViewModels"
        xmlns:controls="clr-namespace:System.Application.UI.Views.Controls"
        xmlns:ms="using:System.Application.Settings"
        xmlns:gif="using:AvaloniaGif"
        xmlns:i="using:Avalonia.Xaml.Interactivity"
        xmlns:service="using:System.Application.Services"
        xmlns:ia="using:Avalonia.Xaml.Interactions.Core"
        Background="{x:Null}"
        x:DataType="vm:IdleAppWindowViewModel"
        x:CompileBindings="True">
  <Panel>
    <controls:TitleBar></controls:TitleBar>
    <DockPanel Margin="{StaticResource TitleBarAfterMargin}">
      <Border
        DockPanel.Dock="Top"
        Classes="paper"
        Background="{DynamicResource ThemeBrushKey}"
        Padding="10"
        Margin="10 10 10 0">
        <DockPanel>
          <StackPanel Orientation="Horizontal" Spacing="8" HorizontalAlignment="Left">
            <ProgressBar
              Width="30"
              Height="30"
              Classes="Circle"
              IsIndeterminate="True"
              Orientation="Vertical"
              IsVisible="{Binding RunLoaingState}"
              ToolTip.Tip="{ReflectionBinding Path=Res.GameList_RuningWait,Mode=OneWay,Source={x:Static resx:R.Current}}" />
            <!--<controls:ProgressRing IsIndeterminate="True"
                        ToolTip.Tip="{ReflectionBinding Path=Res.GameList_RuningWait,Mode=OneWay,Source={x:Static resx:R.Current}}"
                        HorizontalAlignment="Stretch"
                        Height="30"
                        Width="30"
                        IsVisible="{Binding RunLoaingState}" />-->
            <Button
                     Background="Transparent"
                     Cursor="Hand"
                     IsVisible="{Binding RunState}"
                     ToolTip.Tip="{Binding RunStateTxt}"
                     Command="{ReflectionBinding RunOrStopAllButton_Click}">
              <PathIcon Width="16" Height="16" Data="{DynamicResource PauseCircleDrawing}">
              </PathIcon>
            </Button>
            <Button
                Background="Transparent"
                Cursor="Hand"
                IsVisible="{Binding !RunState}"
                ToolTip.Tip="{Binding RunStateTxt}"
                Command="{ReflectionBinding RunOrStopAllButton_Click}">
              <PathIcon Width="16" Height="16" Data="{DynamicResource PlayCircleDrawing}">
              </PathIcon>
            </Button>
            <Button Background="Transparent" Cursor="Hand"
                    Command="{ReflectionBinding Refresh_Click}"
                    ToolTip.Tip="{ReflectionBinding Path=Res.Refresh,Mode=OneWay,Source={x:Static resx:R.Current}}">
              <PathIcon Width="16"  Data="{StaticResource RefreshDrawing}" />
            </Button>
            <Button Background="Transparent" Cursor="Hand"
                  Command="{ReflectionBinding DeleteAllButton_Click}"
                  ToolTip.Tip="{ReflectionBinding Path=Res.GameList_RemoveBtn,Mode=OneWay,Source={x:Static resx:R.Current}}">
              <PathIcon Width="16"  Data="{StaticResource DeleteDrawing}" />
            </Button>
            <TextBlock IsVisible="{CompiledBinding RunState}" VerticalAlignment="Center" Text="{Binding RuningCountTxt}" TextTrimming="CharacterEllipsis"/>
          </StackPanel>
          <ToggleSwitch Content=""
                        OnContent="{ReflectionBinding Path=Res.GameList_AutoAFK,Mode=OneWay,Source={x:Static resx:R.Current}}"
                        OffContent="{ReflectionBinding Path=Res.GameList_AutoAFK,Mode=OneWay,Source={x:Static resx:R.Current}}"
                        HorizontalAlignment="Right"
                        Margin="5 0 0 5"
                        IsChecked="{ReflectionBinding Source={x:Static ms:GameLibrarySettings.IsAutoAFKApps},Path=Value}"
                        ToolTip.Tip="{ReflectionBinding Path=Res.GameList_AutoAFK,Mode=OneWay,Source={x:Static resx:R.Current}}"
                        VerticalAlignment="Center">
          </ToggleSwitch>
        </DockPanel>
      </Border>

      <ScrollViewer  HorizontalScrollBarVisibility="Disabled"
                  VerticalScrollBarVisibility="Auto"
                  Padding="10">
        <Panel>
          <TextBlock IsVisible="{CompiledBinding IsIdleAppEmpty}"
                  Text="{ReflectionBinding Path=Res.GameList_AddIdeaAppEmpty,Mode=OneWay,Source={x:Static     resx:R.Current}}"
                  TextWrapping="WrapWithOverflow"
                  VerticalAlignment="Center"
                  HorizontalAlignment="Center"></TextBlock>
          <ItemsRepeater Items="{Binding IdleGameList}">
            <ItemsRepeater.Layout>
              <UniformGridLayout ItemsJustification="Start" 
                                 MinRowSpacing="10"
                                 MinColumnSpacing="10" 
                                 MaximumRowsOrColumns="10" 
                                 ItemsStretch="Fill" />
            </ItemsRepeater.Layout>
            <ItemsRepeater.ItemTemplate>
              <DataTemplate>
                <StackPanel Spacing="8" Width="120">
                  <Border DockPanel.Dock="Top" 
                          Classes="paper" 
                          x:Name="card"
                          CornerRadius="{DynamicResource ControlCornerRadius}"
                          ClipToBounds="True">
                    <i:Interaction.Behaviors>
                      <ia:EventTriggerBehavior EventName="PointerEntered" SourceObject="{ReflectionBinding #card}">
                        <ia:ChangePropertyAction TargetObject="{ReflectionBinding #item_box}" PropertyName="IsVisible" Value="True"/>
                      </ia:EventTriggerBehavior>
                      <ia:EventTriggerBehavior EventName="PointerExited" SourceObject="{ReflectionBinding #card}">
                        <ia:ChangePropertyAction TargetObject="{ReflectionBinding #item_box}" PropertyName="IsVisible" Value="False"/>
                      </ia:EventTriggerBehavior>
                    </i:Interaction.Behaviors>
                    <Panel x:Name="app" 
                           Width="{ReflectionBinding $parent[StackPanel].Width}">
                      <Border CornerRadius="{DynamicResource ControlCornerRadius}"
                              ClipToBounds="True"
                              Classes="paper">
                        <gif:Image2 x:Name="library"
                                    Stretch="UniformToFill"
                                    DecodeWidth="{ReflectionBinding $parent[StackPanel].Width}"
                                    Source="{Binding LibraryGridStream^}"
                                    FallbackSource="avares://System.Application.SteamTools.Client.Avalonia/Application/UI/Assets/AppResources/Placeholders/0.png">
                        </gif:Image2>
                      </Border>
                      <TextBlock
                        Text="{Binding DisplayName}"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Center"
                        TextWrapping="Wrap"
                        FontSize="20"
                        Foreground="{DynamicResource HighlightForegroundBrushKey}"
                        IsVisible="{Binding LibraryLogoStream^,Converter={StaticResource IsNullConverter}}"/>
                      <Panel Background="{DynamicResource ThemeBrushKey}"
                             IsVisible="False"
                             Opacity="0.8"
                             x:Name="item_box">
                        <Button Classes="flatbutton plain" x:Name="stop_btn"
                                Background="Transparent"
                                Cursor="Hand"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Center"
                             IsVisible="{Binding !Process,Converter={StaticResource IsNullConverter}}"
                         ToolTip.Tip="{ReflectionBinding Path=Res.GameList_StopItemBtn,Mode=OneWay,Source={x:Static resx:R.Current}}"
                         Command="{ReflectionBinding #u.DataContext.RunStopBtn_Click}"
                         CommandParameter="{Binding}">
                          <PathIcon Width="48" Height="48" Data="{DynamicResource PauseCircleDrawing}">
                          </PathIcon>
                        </Button>
                        <Button Classes="flatbutton plain" x:Name="run_btn"
                            Background="Transparent"
                            Cursor="Hand"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Center"
                            IsVisible="{Binding Process,Converter={StaticResource IsNullConverter}}"
                            ToolTip.Tip="{ReflectionBinding Path=Res.GameList_RuningItemBtn,Mode=OneWay,Source={x:Static resx:R.Current}}"
                            Command="{ReflectionBinding #u.DataContext.RunStopBtn_Click}"
                            CommandParameter="{Binding}">
                          <PathIcon Width="48" Height="48" Data="{DynamicResource PlayCircleDrawing}">
                          </PathIcon>
                        </Button>
                        <Button Classes="flatbutton" x:Name="delete_btn"
                                Background="Transparent"
                                Cursor="Hand"
                                HorizontalAlignment="Right"
                                Margin="0,0,0,150"
                                ToolTip.Tip="{ReflectionBinding Path=Res.GameList_RemoveItemBtn,Mode=OneWay,Source={x:Static resx:R.Current}}"
                                Command="{ReflectionBinding #u.DataContext.DeleteButton_Click}"
                                CommandParameter="{Binding}">
                          <PathIcon Width="10" Data="{DynamicResource CloseDrawing}">
                          </PathIcon>
                        </Button>
                      </Panel>

                    </Panel>
                  </Border>

                  <controls:ScrollingTextBlock Width="{ReflectionBinding #app.Width}" Text="{Binding DisplayName}" FontSize="12" FontWeight="Bold" Foreground="{DynamicResource HighlightForegroundBrushKey}"/>
                  <WrapPanel IsVisible="{Binding !Process,Converter={StaticResource IsNullConverter}}">
                    <Ellipse Height="6" Width="6" Fill="#47A42B" Margin="0 0 5 0"></Ellipse>
                    <TextBlock
                         Text="{ReflectionBinding Path=Res.GameList_RunState,Mode=OneWay,Source={x:Static resx:R.Current}}"
                         VerticalAlignment="Center"
                         FontSize="12" />
                  </WrapPanel>
                  <WrapPanel IsVisible="{Binding Process,Converter={StaticResource IsNullConverter}}">
                    <Ellipse Height="6" Width="6"  Fill="#FF4F58" Margin="0 0 5 0"> </Ellipse>
                    <TextBlock
                         Text="{ReflectionBinding Path=Res.GameList_StopState,Mode=OneWay,Source={x:Static resx:R.Current}}"
                         VerticalAlignment="Center"
                         FontSize="12" />
                  </WrapPanel>
                </StackPanel>
              </DataTemplate>
            </ItemsRepeater.ItemTemplate>
          </ItemsRepeater>
        </Panel>
      </ScrollViewer>
    </DockPanel>
  </Panel>
</Window>

<!--IsVisible="{Binding LibraryLogoStream^,Converter={StaticResource IsNullConverter}}"-->
<!--<ItemsControl Items="{Binding IdleGameList}">
  <ItemsControl.ItemTemplate>
    <DataTemplate>
      <StackPanel>
        <DockPanel Margin="0 10">
          <TextBlock Text="{Binding Value}"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"></TextBlock>
          <TextBlock Text="{Binding Key}" HorizontalAlignment="Right"
                       VerticalAlignment="Center"></TextBlock>
        </DockPanel>
        <Separator Classes="Separator"  />
      </StackPanel>
    </DataTemplate>
  </ItemsControl.ItemTemplate>
</ItemsControl>-->
